//
//  MessageEmbeddingService.swift
//  NexusAI
//
//  Service for message embedding operations
//

import Foundation
import FirebaseFirestore
import FirebaseFunctions

/// Custom errors for embedding operations
enum EmbeddingError: LocalizedError {
    case networkError(String)
    case cloudFunctionError(String)
    case invalidResponse
    case notAuthenticated
    
    var errorDescription: String? {
        switch self {
        case .networkError(let message):
            return "Network error: \(message)"
        case .cloudFunctionError(let message):
            return "Cloud function error: \(message)"
        case .invalidResponse:
            return "Invalid response from server"
        case .notAuthenticated:
            return "User not authenticated"
        }
    }
}

/// Service for managing message embeddings and vector search
class MessageEmbeddingService {
    
    // MARK: - Properties
    
    private let functions: Functions
    private let db: Firestore
    
    // MARK: - Initialization
    
    init() {
        self.functions = Functions.functions()
        self.db = Firestore.firestore()
        
        // Optional: Use emulator for local testing
        #if DEBUG
        // Uncomment to use local emulator
        // functions.useEmulator(withHost: "127.0.0.1", port: 5001)
        #endif
    }
    
    // MARK: - Public Methods
    
    /// Manually trigger embedding for a message (if auto-embedding failed)
    /// Note: In production, embeddings are automatically generated by Cloud Function
    func embedMessage(_ message: Message) async throws {
        // This would be implemented if we need manual re-embedding
        // For MVP, Cloud Function handles all embeddings automatically
        throw EmbeddingError.cloudFunctionError("Manual embedding not implemented - use Cloud Function trigger")
    }
    
    /// Search messages using vector similarity
    /// - Parameters:
    ///   - query: Natural language search query
    ///   - topK: Number of results to return (default: 5)
    /// - Returns: Array of source messages sorted by relevance
    func searchMessages(query: String, topK: Int = 5) async throws -> [SourceMessage] {
        guard let userId = getCurrentUserId() else {
            throw EmbeddingError.notAuthenticated
        }
        
        // Prepare parameters
        let parameters: [String: Any] = [
            "query": query,
            "userId": userId,
            "topK": topK
        ]
        
        do {
            // Call Cloud Function
            let callable = functions.httpsCallable("ragSearch")
            let result = try await callable.call(parameters)
            
            // Parse response
            guard let data = result.data as? [[String: Any]] else {
                throw EmbeddingError.invalidResponse
            }
            
            // Convert to SourceMessage objects
            let sources = data.compactMap { dict -> SourceMessage? in
                guard let messageId = dict["messageId"] as? String,
                      let conversationId = dict["conversationId"] as? String,
                      let conversationName = dict["conversationName"] as? String,
                      let messageText = dict["text"] as? String,
                      let senderName = dict["senderName"] as? String,
                      let timestamp = dict["timestamp"] as? Timestamp,
                      let relevanceScore = dict["relevanceScore"] as? Double else {
                    return nil
                }
                
                return SourceMessage(
                    id: messageId,
                    conversationId: conversationId,
                    conversationName: conversationName,
                    messageText: messageText,
                    senderName: senderName,
                    timestamp: timestamp,
                    relevanceScore: relevanceScore
                )
            }
            
            return sources
        } catch {
            // Handle specific Firebase errors
            if let functionsError = error as NSError? {
                throw EmbeddingError.cloudFunctionError(functionsError.localizedDescription)
            }
            throw EmbeddingError.networkError(error.localizedDescription)
        }
    }
    
    // MARK: - Private Helpers
    
    /// Get current user ID from Firebase Auth
    private func getCurrentUserId() -> String? {
        return FirebaseService.shared.currentUserId
    }
}

